
// This file is generated by build.rs

//! This crate provides a way for you to serialize and deserialize the `std::io::ErrorKind` enum.
//! To use it:
//! 
//! ```
//! use serde_std_io_error_kind::StdIoErrorKindDef;
//! use serde::{Serialize, Deserialize};
//! 
//! #[derive(Serialize, Deserialize)]
//! struct MyStruct {
//!     #[serde(with = "StdIoErrorKindDef")]
//!    error_kind: std::io::ErrorKind,
//! }
//! ```
//! 
//! ```
//! use serde_std_io_error_kind::StdIoErrorKindDef;
//! use serde::{Serialize, Deserialize};
//! 
//! #[derive(Serialize, Deserialize)]
//! enum MyIoErrorKind {
//!    FileNotFound,
//!    PermissionDenied,
//!    Other(#[serde(with = "StdIoErrorKindDef")] std::io::ErrorKind),
//! }
//! ```

#![allow(unreachable_patterns)]
#![allow(unused_braces)]

use std::io::ErrorKind as _StdIoErrorKind;
use serde::{Deserialize, Serializer};

#[derive(Deserialize)]
#[serde(remote = "_StdIoErrorKind")]
pub enum StdIoErrorKindDef {
    NotFound,
PermissionDenied,
ConnectionRefused,
ConnectionReset,
#[cfg(io_error_more)]
HostUnreachable,
#[cfg(io_error_more)]
NetworkUnreachable,
ConnectionAborted,
NotConnected,
AddrInUse,
AddrNotAvailable,
#[cfg(io_error_more)]
NetworkDown,
BrokenPipe,
AlreadyExists,
WouldBlock,
#[cfg(io_error_more)]
NotADirectory,
#[cfg(io_error_more)]
IsADirectory,
#[cfg(io_error_more)]
DirectoryNotEmpty,
#[cfg(io_error_more)]
ReadOnlyFilesystem,
#[cfg(io_error_more)]
FilesystemLoop,
#[cfg(io_error_more)]
StaleNetworkFileHandle,
InvalidInput,
InvalidData,
TimedOut,
WriteZero,
#[cfg(io_error_more)]
StorageFull,
#[cfg(io_error_more)]
NotSeekable,
#[cfg(io_error_more)]
FilesystemQuotaExceeded,
#[cfg(io_error_more)]
FileTooLarge,
#[cfg(io_error_more)]
ResourceBusy,
#[cfg(io_error_more)]
ExecutableFileBusy,
#[cfg(io_error_more)]
Deadlock,
#[cfg(io_error_more)]
CrossesDevices,
#[cfg(io_error_more)]
TooManyLinks,
#[cfg(io_error_more)]
InvalidFilename,
#[cfg(io_error_more)]
ArgumentListTooLong,
Interrupted,
Unsupported,
UnexpectedEof,
OutOfMemory,
Other,
#[cfg(io_error_more)]
Uncategorized
}

impl StdIoErrorKindDef {
    pub fn serialize<S>(io_error_kind: &_StdIoErrorKind, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match *io_error_kind {
             _StdIoErrorKind::NotFound =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 0 } #[cfg(not(io_error_more))] { 0 } },
                        "NotFound"),
 _StdIoErrorKind::PermissionDenied =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 1 } #[cfg(not(io_error_more))] { 1 } },
                        "PermissionDenied"),
 _StdIoErrorKind::ConnectionRefused =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 2 } #[cfg(not(io_error_more))] { 2 } },
                        "ConnectionRefused"),
 _StdIoErrorKind::ConnectionReset =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 3 } #[cfg(not(io_error_more))] { 3 } },
                        "ConnectionReset"),
#[cfg(io_error_more)] _StdIoErrorKind::HostUnreachable =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 4 } #[cfg(not(io_error_more))] { 4 } },
                        "HostUnreachable"),
#[cfg(io_error_more)] _StdIoErrorKind::NetworkUnreachable =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 5 } #[cfg(not(io_error_more))] { 4 } },
                        "NetworkUnreachable"),
 _StdIoErrorKind::ConnectionAborted =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 6 } #[cfg(not(io_error_more))] { 4 } },
                        "ConnectionAborted"),
 _StdIoErrorKind::NotConnected =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 7 } #[cfg(not(io_error_more))] { 5 } },
                        "NotConnected"),
 _StdIoErrorKind::AddrInUse =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 8 } #[cfg(not(io_error_more))] { 6 } },
                        "AddrInUse"),
 _StdIoErrorKind::AddrNotAvailable =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 9 } #[cfg(not(io_error_more))] { 7 } },
                        "AddrNotAvailable"),
#[cfg(io_error_more)] _StdIoErrorKind::NetworkDown =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 10 } #[cfg(not(io_error_more))] { 8 } },
                        "NetworkDown"),
 _StdIoErrorKind::BrokenPipe =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 11 } #[cfg(not(io_error_more))] { 8 } },
                        "BrokenPipe"),
 _StdIoErrorKind::AlreadyExists =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 12 } #[cfg(not(io_error_more))] { 9 } },
                        "AlreadyExists"),
 _StdIoErrorKind::WouldBlock =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 13 } #[cfg(not(io_error_more))] { 10 } },
                        "WouldBlock"),
#[cfg(io_error_more)] _StdIoErrorKind::NotADirectory =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 14 } #[cfg(not(io_error_more))] { 11 } },
                        "NotADirectory"),
#[cfg(io_error_more)] _StdIoErrorKind::IsADirectory =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 15 } #[cfg(not(io_error_more))] { 11 } },
                        "IsADirectory"),
#[cfg(io_error_more)] _StdIoErrorKind::DirectoryNotEmpty =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 16 } #[cfg(not(io_error_more))] { 11 } },
                        "DirectoryNotEmpty"),
#[cfg(io_error_more)] _StdIoErrorKind::ReadOnlyFilesystem =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 17 } #[cfg(not(io_error_more))] { 11 } },
                        "ReadOnlyFilesystem"),
#[cfg(io_error_more)] _StdIoErrorKind::FilesystemLoop =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 18 } #[cfg(not(io_error_more))] { 11 } },
                        "FilesystemLoop"),
#[cfg(io_error_more)] _StdIoErrorKind::StaleNetworkFileHandle =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 19 } #[cfg(not(io_error_more))] { 11 } },
                        "StaleNetworkFileHandle"),
 _StdIoErrorKind::InvalidInput =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 20 } #[cfg(not(io_error_more))] { 11 } },
                        "InvalidInput"),
 _StdIoErrorKind::InvalidData =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 21 } #[cfg(not(io_error_more))] { 12 } },
                        "InvalidData"),
 _StdIoErrorKind::TimedOut =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 22 } #[cfg(not(io_error_more))] { 13 } },
                        "TimedOut"),
 _StdIoErrorKind::WriteZero =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 23 } #[cfg(not(io_error_more))] { 14 } },
                        "WriteZero"),
#[cfg(io_error_more)] _StdIoErrorKind::StorageFull =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 24 } #[cfg(not(io_error_more))] { 15 } },
                        "StorageFull"),
#[cfg(io_error_more)] _StdIoErrorKind::NotSeekable =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 25 } #[cfg(not(io_error_more))] { 15 } },
                        "NotSeekable"),
#[cfg(io_error_more)] _StdIoErrorKind::FilesystemQuotaExceeded =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 26 } #[cfg(not(io_error_more))] { 15 } },
                        "FilesystemQuotaExceeded"),
#[cfg(io_error_more)] _StdIoErrorKind::FileTooLarge =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 27 } #[cfg(not(io_error_more))] { 15 } },
                        "FileTooLarge"),
#[cfg(io_error_more)] _StdIoErrorKind::ResourceBusy =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 28 } #[cfg(not(io_error_more))] { 15 } },
                        "ResourceBusy"),
#[cfg(io_error_more)] _StdIoErrorKind::ExecutableFileBusy =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 29 } #[cfg(not(io_error_more))] { 15 } },
                        "ExecutableFileBusy"),
#[cfg(io_error_more)] _StdIoErrorKind::Deadlock =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 30 } #[cfg(not(io_error_more))] { 15 } },
                        "Deadlock"),
#[cfg(io_error_more)] _StdIoErrorKind::CrossesDevices =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 31 } #[cfg(not(io_error_more))] { 15 } },
                        "CrossesDevices"),
#[cfg(io_error_more)] _StdIoErrorKind::TooManyLinks =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 32 } #[cfg(not(io_error_more))] { 15 } },
                        "TooManyLinks"),
#[cfg(io_error_more)] _StdIoErrorKind::InvalidFilename =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 33 } #[cfg(not(io_error_more))] { 15 } },
                        "InvalidFilename"),
#[cfg(io_error_more)] _StdIoErrorKind::ArgumentListTooLong =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 34 } #[cfg(not(io_error_more))] { 15 } },
                        "ArgumentListTooLong"),
 _StdIoErrorKind::Interrupted =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 35 } #[cfg(not(io_error_more))] { 15 } },
                        "Interrupted"),
 _StdIoErrorKind::Unsupported =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 36 } #[cfg(not(io_error_more))] { 16 } },
                        "Unsupported"),
 _StdIoErrorKind::UnexpectedEof =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 37 } #[cfg(not(io_error_more))] { 17 } },
                        "UnexpectedEof"),
 _StdIoErrorKind::OutOfMemory =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 38 } #[cfg(not(io_error_more))] { 18 } },
                        "OutOfMemory"),
 _StdIoErrorKind::Other =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 39 } #[cfg(not(io_error_more))] { 19 } },
                        "Other"),
#[cfg(io_error_more)] _StdIoErrorKind::Uncategorized =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        { #[cfg(io_error_more)] { 40 } #[cfg(not(io_error_more))] { 20 } },
                        "Uncategorized"),
            _ => unreachable!(),
        }
    }
}
