use std::{
    fs::{File, OpenOptions},
    io::{Read, Write},
};

const CODE: &str = r#"
// This file is generated by build.rs

{docs}

#![allow(unreachable_patterns)]
#![allow(unused_braces)]

use std::io::ErrorKind as _StdIoErrorKind;
use serde::{Deserialize, Serializer};

#[derive(Deserialize)]
#[serde(remote = "_StdIoErrorKind")]
pub enum StdIoErrorKindDef {
    {variants}
}

impl StdIoErrorKindDef {
    pub fn serialize<S>(io_error_kind: &_StdIoErrorKind, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        match *io_error_kind {
            {arms}
            _ => unreachable!(),
        }
    }
}
"#;

fn main() {
    println!("cargo:rerun-if-changed=variants.txt,docs.rs");

    let mut file = File::open("variants.txt").unwrap();

    let mut buf = String::new();
    file.read_to_string(&mut buf).unwrap();

    let mut variants: Vec<_> = buf.trim().split(',').collect();
    variants.retain(|s| !s.is_empty());

    let mut f = OpenOptions::new()
        .write(true)
        .create(true)
        .open("src/lib.rs")
        .unwrap();

    f.write_all(&[]).unwrap();
    // add all the variants to the enum definition
    let mut code = CODE.replace("{variants}", &variants.join(","));

    let mut match_arms = Vec::new();
    // keeps track of the index of the variant in the enum if all the
    // variants with cfg were removed
    let mut not_cfg_idx = 0;

    // loop through all the variants
    for (idx, variant) in variants.iter().enumerate() {
        let name: Vec<_> = variant.split_ascii_whitespace().collect();
        let mut cfg = "";

        let has_cfg = name.len() > 1;
        if has_cfg {
            cfg = name[0];
        }

        let name = name[name.len() - 1];
        match_arms.push(
            format!(
                r#"{cfg} _StdIoErrorKind::{name} =>
                    serializer.serialize_unit_variant(
                        "StdIoErrorKindDef",
                        {{ #[cfg(io_error_more)] {{ {idx} }} #[cfg(not(io_error_more))] {{ {not_cfg_idx} }} }},
                        "{name}"),"#,
                cfg = cfg,
                name = name,
                idx = idx,
                not_cfg_idx = not_cfg_idx
            )
        );

        if !has_cfg {
            not_cfg_idx += 1;
        }
    }

    code = code.replace("{arms}", &match_arms.join("\n"));

    let mut docs_file = File::open("src/docs.rs").unwrap();
    let mut docs = String::new();
    docs_file.read_to_string(&mut docs).unwrap();
    code = code.replace("{docs}", &docs);

    f.write_all(code.as_bytes()).unwrap();
}
